{"ast":null,"code":"import { auth, storage } from \"../../firebase\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\nconst client = axios.create({\n  baseURL: \"https://e-complainbox.herokuapp.com\",\n  json: true\n});\n\nconst imageupload = (_ref, urls, setUrls, history) => {\n  let {\n    files,\n    city,\n    department,\n    complainType,\n    severity,\n    subject,\n    description\n  } = _ref;\n  return async dispatch => {\n    var len1 = files.length;\n    let images = [];\n    let completedCount = 0;\n\n    for (var i = 0; i < len1; i++) {\n      var image = files[i];\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      uploadTask.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(\"error:-\", error);\n      }, () => {\n        uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n          console.log(\"File available at\", downloadURL);\n          images.push(downloadURL.toString());\n          completedCount = completedCount + 1;\n          console.log(completedCount);\n          console.log(len1);\n\n          if (completedCount == len1) {\n            console.log(images);\n            let data = {\n              city: city,\n              department: department,\n              description: description,\n              subject: subject,\n              complainType: complainType,\n              severity: severity,\n              userid: localStorage.getItem(\"userID\"),\n              urls: images,\n              token: localStorage.getItem(\"token\")\n            };\n            client({\n              method: \"post\",\n              url: \"/createcomplaint\",\n              headers: {\n                AuthToken: localStorage.getItem(\"token\")\n              },\n              data: data\n            }).then(() => {\n              history.push(\"/dashboard\");\n            });\n          }\n        });\n      });\n    }\n  };\n};\n\nconst updateComplain = (_ref2, history, complianID) => {\n  let {\n    files,\n    city,\n    department,\n    complainType,\n    severity,\n    subject,\n    description\n  } = _ref2;\n\n  try {\n    let len1 = files && files.length;\n    let images = [];\n    let completedCount = 0;\n\n    for (var i = 0; i < len1; i++) {\n      var image = files[i];\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      uploadTask.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n      }, error => {\n        // Handle unsuccessful uploads\n        console.log(\"error:-\", error);\n      }, () => {\n        uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n          console.log(\"File available at\", downloadURL);\n          images.push(downloadURL.toString());\n          completedCount = completedCount + 1;\n          console.log(completedCount);\n          console.log(len1);\n\n          if (completedCount == len1) {\n            console.log(images);\n          }\n        });\n      });\n    }\n\n    let data = {\n      city: city,\n      department: department,\n      description: description,\n      subject: subject,\n      complainType: complainType,\n      severity: severity,\n      userid: localStorage.getItem(\"userID\"),\n      urls: images,\n      token: localStorage.getItem(\"token\")\n    };\n    client({\n      method: \"put\",\n      url: `/updatecomplaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      },\n      data: data\n    }).then(() => {\n      toast.success(\"The complain is updated\");\n      history.push(\"/dashboard\");\n    }).catch(error => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst updateComplainStatus = async (complainStatus, userid, complianID) => {\n  try {\n    let data = {\n      userid: userid,\n      complainstatus: complainStatus\n    };\n    client({\n      method: \"put\",\n      url: `/complaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      },\n      data: data\n    }).then(() => {\n      toast.success(\"The status complain is updated\");\n    }).catch(error => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst getSingleComplainData = async id => {\n  try {\n    const {\n      data\n    } = await client({\n      method: \"get\",\n      url: `/complaint/${id}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      }\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getComplainGroupData = async userId => {\n  try {\n    const {\n      data\n    } = await client({\n      method: \"get\",\n      url: `/complaintgroupbydata/${userId}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      }\n    });\n    return data.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst departmentChange = (_ref3, complainStatus, userID, history, complianID) => {\n  let {\n    department\n  } = _ref3;\n\n  try {\n    let data = {\n      department: department,\n      complainstatus: complainStatus,\n      userid: userID\n    };\n    client({\n      method: \"put\",\n      url: `/complaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      },\n      data: data\n    }).then(() => {\n      toast.success(`The complain is forwarded to ${department} department`);\n      history.push(\"/dashboard\");\n    }).catch(error => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst createComment = async (comment, userid, complianID) => {\n  try {\n    let data = {\n      userid: userid,\n      comments: comment\n    };\n    client({\n      method: \"post\",\n      url: `/createcomments/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      },\n      data: data\n    }).then(data => {\n      toast.success(\"You have successfully created the comment\");\n      return data.data;\n    }).catch(error => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst getDashboardData = async (page, rowsPerPage, userType, userId) => {\n  try {\n    let data = null;\n\n    if (userType === \"department\") {\n      data = await client({\n        method: \"get\",\n        url: `/complaintbydep/${userId}/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\")\n        }\n      });\n    } else if (userType === \"complainant\") {\n      data = await client({\n        method: \"get\",\n        url: `/complaintbyuser/${userId}/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\")\n        }\n      });\n    } else {\n      data = await client({\n        method: \"get\",\n        url: `/getcomplaints/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\")\n        }\n      });\n    }\n\n    console.log(data);\n    return data.data.Complains;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst publicComplain = async (page, rowsPerPage) => {\n  try {\n    let data = null;\n    data = await client({\n      method: \"get\",\n      url: `/publiccomplaints/${page}/${rowsPerPage}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      }\n    });\n    return data.data.Complains;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst getPublicComplainGroupData = async userId => {\n  try {\n    const {\n      data\n    } = await client({\n      method: \"get\",\n      url: `publiccomplaintgroupbydata`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      }\n    });\n    return data.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getCriticalComplain = async (severity, page, rowsPerPage) => {\n  try {\n    const {\n      data\n    } = await client({\n      method: \"get\",\n      url: `complaintsbyseverity/${severity}/${page}/${rowsPerPage}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\")\n      }\n    });\n    return data.Complains;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nexport { imageupload, getDashboardData, getSingleComplainData, getComplainGroupData, updateComplain, updateComplainStatus, createComment, departmentChange, publicComplain, getPublicComplainGroupData, getCriticalComplain };","map":{"version":3,"sources":["/Applications/MAMP/htdocs/e-complain-box/packages/frontend/src/Shared/Api/api.js"],"names":["auth","storage","toast","axios","client","create","baseURL","json","imageupload","urls","setUrls","history","files","city","department","complainType","severity","subject","description","dispatch","len1","length","images","completedCount","i","image","uploadTask","ref","name","put","on","snapshot","progress","bytesTransferred","totalBytes","console","log","error","getDownloadURL","then","downloadURL","push","toString","data","userid","localStorage","getItem","token","method","url","headers","AuthToken","updateComplain","complianID","success","catch","message","updateComplainStatus","complainStatus","complainstatus","getSingleComplainData","id","getComplainGroupData","userId","departmentChange","userID","createComment","comment","comments","getDashboardData","page","rowsPerPage","userType","Complains","publicComplain","getPublicComplainGroupData","getCriticalComplain"],"mappings":"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","sourcesContent":["import { auth, storage } from \"../../firebase\";\nimport { toast } from \"react-toastify\";\nimport axios from \"axios\";\n\nconst client = axios.create({\n  baseURL: \"https://e-complainbox.herokuapp.com\",\n  json: true,\n});\nconst imageupload =\n  (\n    { files, city, department, complainType, severity, subject, description },\n    urls,\n    setUrls,\n    history\n  ) =>\n  async (dispatch) => {\n    var len1 = files.length;\n    let images = [];\n    let completedCount = 0;\n    for (var i = 0; i < len1; i++) {\n      var image = files[i];\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.log(\"error:-\", error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n            console.log(\"File available at\", downloadURL);\n            images.push(downloadURL.toString());\n            completedCount = completedCount + 1;\n            console.log(completedCount);\n            console.log(len1);\n            if (completedCount == len1) {\n              console.log(images);\n              let data = {\n                city: city,\n                department: department,\n                description: description,\n                subject: subject,\n                complainType: complainType,\n                severity: severity,\n                userid: localStorage.getItem(\"userID\"),\n                urls: images,\n                token: localStorage.getItem(\"token\"),\n              };\n\n              client({\n                method: \"post\",\n                url: \"/createcomplaint\",\n                headers: {\n                  AuthToken: localStorage.getItem(\"token\"),\n                },\n                data: data,\n              }).then(() => {\n                history.push(\"/dashboard\");\n              });\n            }\n          });\n        }\n      );\n    }\n  };\n\nconst updateComplain = (\n  { files, city, department, complainType, severity, subject, description },\n  history,\n  complianID\n) => {\n  try {\n    let len1 = files && files.length;\n    let images = [];\n    let completedCount = 0;\n    for (var i = 0; i < len1; i++) {\n      var image = files[i];\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n        },\n        (error) => {\n          // Handle unsuccessful uploads\n          console.log(\"error:-\", error);\n        },\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {\n            console.log(\"File available at\", downloadURL);\n            images.push(downloadURL.toString());\n            completedCount = completedCount + 1;\n            console.log(completedCount);\n            console.log(len1);\n            if (completedCount == len1) {\n              console.log(images);\n            }\n          });\n        }\n      );\n    }\n    let data = {\n      city: city,\n      department: department,\n      description: description,\n      subject: subject,\n      complainType: complainType,\n      severity: severity,\n      userid: localStorage.getItem(\"userID\"),\n      urls: images,\n      token: localStorage.getItem(\"token\"),\n    };\n\n    client({\n      method: \"put\",\n      url: `/updatecomplaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n      data: data,\n    })\n      .then(() => {\n        toast.success(\"The complain is updated\");\n        history.push(\"/dashboard\");\n      })\n      .catch((error) => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst updateComplainStatus = async (complainStatus, userid, complianID) => {\n  try {\n    let data = {\n      userid: userid,\n      complainstatus: complainStatus,\n    };\n    client({\n      method: \"put\",\n      url: `/complaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n      data: data,\n    })\n      .then(() => {\n        toast.success(\"The status complain is updated\");\n      })\n      .catch((error) => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\nconst getSingleComplainData = async (id) => {\n  try {\n    const { data } = await client({\n      method: \"get\",\n      url: `/complaint/${id}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n    });\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getComplainGroupData = async (userId) => {\n  try {\n    const { data } = await client({\n      method: \"get\",\n      url: `/complaintgroupbydata/${userId}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n    });\n    return data.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst departmentChange = (\n  { department },\n  complainStatus,\n  userID,\n  history,\n  complianID\n) => {\n  try {\n    let data = {\n      department: department,\n      complainstatus: complainStatus,\n      userid: userID,\n    };\n\n    client({\n      method: \"put\",\n      url: `/complaint/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n      data: data,\n    })\n      .then(() => {\n        toast.success(`The complain is forwarded to ${department} department`);\n        history.push(\"/dashboard\");\n      })\n      .catch((error) => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst createComment = async (comment, userid, complianID) => {\n  try {\n    let data = {\n      userid: userid,\n      comments: comment,\n    };\n    client({\n      method: \"post\",\n      url: `/createcomments/${complianID}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n      data: data,\n    })\n      .then((data) => {\n        toast.success(\"You have successfully created the comment\");\n        return data.data;\n      })\n      .catch((error) => toast.error(error.message));\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst getDashboardData = async (page, rowsPerPage, userType, userId) => {\n  try {\n    let data = null;\n    if (userType === \"department\") {\n      data = await client({\n        method: \"get\",\n        url: `/complaintbydep/${userId}/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\"),\n        },\n      });\n    } else if (userType === \"complainant\") {\n      data = await client({\n        method: \"get\",\n        url: `/complaintbyuser/${userId}/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\"),\n        },\n      });\n    } else {\n      data = await client({\n        method: \"get\",\n        url: `/getcomplaints/${page}/${rowsPerPage}`,\n        headers: {\n          AuthToken: localStorage.getItem(\"token\"),\n        },\n      });\n    }\n    console.log(data);\n    return data.data.Complains;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst publicComplain = async (page, rowsPerPage) => {\n  try {\n    let data = null;\n    data = await client({\n      method: \"get\",\n      url: `/publiccomplaints/${page}/${rowsPerPage}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n    });\n    return data.data.Complains;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\n\nconst getPublicComplainGroupData = async (userId) => {\n  try {\n    const { data } = await client({\n      method: \"get\",\n      url: `publiccomplaintgroupbydata`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n    });\n    return data.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getCriticalComplain = async (severity, page, rowsPerPage) => {\n  try {\n    const { data } = await client({\n      method: \"get\",\n      url: `complaintsbyseverity/${severity}/${page}/${rowsPerPage}`,\n      headers: {\n        AuthToken: localStorage.getItem(\"token\"),\n      },\n    });\n    return data.Complains;\n  } catch (error) {\n    toast.error(error.message);\n  }\n};\nexport {\n  imageupload,\n  getDashboardData,\n  getSingleComplainData,\n  getComplainGroupData,\n  updateComplain,\n  updateComplainStatus,\n  createComment,\n  departmentChange,\n  publicComplain,\n  getPublicComplainGroupData,\n  getCriticalComplain,\n};\n"]},"metadata":{},"sourceType":"module"}